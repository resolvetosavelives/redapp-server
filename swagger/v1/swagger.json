{
  "swagger": "2.0",
  "basePath": "/api/v1",
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "info": {
    "description": "# API specification for RedApp\n## Sync APIs\nThis API spec documents the endpoints that the devices (that are offline to varying levels) will use to sync data. The sync end points will send and receive bulk (a list of) entities. Both sending and receiving can be batched with configurable batch-sizes to accommodate low network bandwidth situations.\n## Nesting resources\nThe APIs have been designed to provide an optimal balance between accuracy and simplicity. Some of the APIs (patients) will be nested, and some other (blood pressures) will be flat.\n## Authentication\nTODO\n\n## Sync\n\n### Why it needs to exist\n\nNetwork connectivity on phones in rural\nareas can be low, and patchy. So, the app needs to work offline,\nas much as possible. The sync mechanism exists to allow sharing\nrecords of patients, blook pressures, etc across devices.\n\n### Levers\n\nPhysical resource constraints such as battery life, or network\nare not under our control. In order for the app to adapt\nwell to the constraints, we need to have knobs on:\n\n1. Batch size: how many records to send or fetch\n2. Sync frequency: how often sending or fetchin happens\n\nPreferably, these levers are modifyable at run-time, per device.\n\n### Mechanism\n\n1. Send records from device to server\n\nThe device needs to keep track of records that need to be\nsynced. These can be new records, or records that have one or more\nfields updated. These records need to be formatted into the payload\nschemas as defined in the individual APIs below. The API does not\ndifferentiate between new and updated records; this is handled by the\nserver.  These payloads then need to be sent in batches, where each\nbatch is inherently independent of the previous one. However, it is\nimportant to _send_ all records that need syncing, before fetching\nrecords from the server.\n\n2. Fetch records from server to device\n\nWhen fetching records for the first time, the `first_time` query\nparameter should be set. The server will then send back a number of\nrecords as defined by the `number_of_records` query parameter. This is\nessentially the \"batch_size\". The first response also includes a\n`latest_record_timestamp`, that needs to be sent with the next\nrequest, in order to retrieve more records from the server. If there\nare no more records to be sent from the server, it returns an empty\nlist.\n\n3. Merge records on device\n\nThe server may send back the same record multiple times. The merging\nfunctionality on the device needs to be idempotent for this reason.\n\n### Caveats\n\nThe computation of records to be sent is currently based on the\n`updated_on_server_at` field on the server, and the\n`latest_record_timestamp` in the query parameters. This implies, that\nif there are multiple records with the same timestamp, the same record\nwill be sent multiple times. And if there are as many records with the\nsame timestamp as the batch size, the same response is sent over and\nover again, effectively breaking the batching mechanism.\n\nThis implies we need sequencing of records on the server. We rely on\ntimestamps for this now. But we could have a separate sequence, or an\nimmutable and sequenced audit log to do this.\n",
    "version": "v1",
    "title": "RedApp Server",
    "x-logo": {
      "url": "https://static1.squarespace.com/static/59945d559f7456b755d759f2/t/59aebc5ecf81e0ac9b4b6f59/1526304079797/?format=1500w",
      "backgroundColor": "#FFFFFF"
    },
    "contact": {
      "email": "eng-backend@resolvetosavelives.org"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/resolvetosavelives/redapp-server/blob/master/LICENSE"
    }
  },
  "paths": {
    "/patients/sync": {
      "post": {
        "summary": "Syncs patient, address and phone number data from device to server.",
        "tags": [
          "patient"
        ],
        "parameters": [
          {
            "name": "patients",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "patients": {
                  "$ref": "#/definitions/nested_patients"
                }
              },
              "required": [
                "patients"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "some, or no errors were found",
            "schema": {
              "type": "object",
              "properties": {
                "errors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/patient_error_spec"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Syncs patient, address and phone number data from server to device.",
        "tags": [
          "patient"
        ],
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of the latest record synced with server, with millisecond precision.\n                    Use the server returned value in the next request to continue fetching records.",
            "name": "processed_since",
            "in": "query"
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "Number of record to retrieve (a.k.a batch-size)"
          }
        ],
        "responses": {
          "200": {
            "description": "patients received",
            "schema": {
              "type": "object",
              "properties": {
                "patients": {
                  "$ref": "#/definitions/nested_patients"
                },
                "processed_since": {
                  "$ref": "#/definitions/processed_since"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "timestamp": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp with millisecond precision"
    },
    "processed_since": {
      "type": "string",
      "format": "date-time",
      "description": "Timestamp of the latest record synced with server, with millisecond precision.\n                    Use the server returned value in the next request to continue fetching records.",
      "name": "processed_since"
    },
    "patient": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "gender": {
          "type": "string",
          "enum": [
            "male",
            "female",
            "transgender"
          ]
        },
        "full_name": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "active",
            "dead",
            "migrated",
            "unresponsive",
            "inactive"
          ]
        },
        "date_of_birth": {
          "type": [
            "string",
            "null"
          ],
          "format": "date"
        },
        "age_when_created": {
          "type": [
            "integer",
            "null"
          ]
        },
        "created_at": {
          "$ref": "#/definitions/timestamp"
        },
        "updated_at": {
          "$ref": "#/definitions/timestamp"
        }
      },
      "required": [
        "id",
        "gender",
        "full_name",
        "created_at",
        "updated_at",
        "status"
      ]
    },
    "address": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "street_address": {
          "type": "string"
        },
        "colony": {
          "type": "string"
        },
        "village": {
          "type": "string"
        },
        "district": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "created_at": {
          "$ref": "#/definitions/timestamp"
        },
        "updated_at": {
          "$ref": "#/definitions/timestamp"
        }
      },
      "required": [
        "id",
        "created_at",
        "updated_at"
      ]
    },
    "phone_number": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "number": {
          "type": "string"
        },
        "phone_type": {
          "type": "string",
          "enum": [
            "mobile",
            "landline"
          ]
        },
        "active": {
          "type": "boolean"
        },
        "created_at": {
          "$ref": "#/definitions/timestamp"
        },
        "updated_at": {
          "$ref": "#/definitions/timestamp"
        }
      },
      "required": [
        "id",
        "created_at",
        "updated_at"
      ]
    },
    "phone_numbers": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/phone_number"
      }
    },
    "error_spec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "field_with_error": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "patient_error_spec": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "uuid"
        },
        "address": {
          "$ref": "#/definitions/error_spec"
        },
        "phone_numbers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/error_spec"
          }
        }
      },
      "required": [
        "id"
      ]
    },
    "nested_patients": {
      "type": "array",
      "description": "List of patients with address and phone numbers nested.",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "gender": {
            "type": "string",
            "enum": [
              "male",
              "female",
              "transgender"
            ]
          },
          "full_name": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "active",
              "dead",
              "migrated",
              "unresponsive",
              "inactive"
            ]
          },
          "date_of_birth": {
            "type": [
              "string",
              "null"
            ],
            "format": "date"
          },
          "age_when_created": {
            "type": [
              "integer",
              "null"
            ]
          },
          "created_at": {
            "$ref": "#/definitions/timestamp"
          },
          "updated_at": {
            "$ref": "#/definitions/timestamp"
          },
          "address": {
            "$ref": "#/definitions/address"
          },
          "phone_numbers": {
            "$ref": "#/definitions/phone_numbers"
          }
        },
        "required": [
          "id",
          "gender",
          "full_name",
          "created_at",
          "updated_at",
          "status"
        ]
      }
    }
  }
}