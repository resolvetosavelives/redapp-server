#! /bin/bash

{
  RUBY_VERSION=$(cat .ruby-version)
} > /dev/null 2>&1

init (){
  verify_ruby_version && verify_bundled_gems
  verify_postgres && verify_database_migrations
  configure_parallel_testing
}

## utility functions for dependencies
is_darwin (){
  PLATFORM=$(uname)
  [ "$PLATFORM" == "Darwin" ]
}

has_homebrew (){
  echo 'Checking for homebrew'
  [ is_darwin ] && [ hash brew >/dev/null 2>&1 ]
}

verify_homebrew (){
  echo 'Verifying Homebrew installed'
  if [ ! has_homebrew ]
  then
    echo 'Homebrew is not installed'
    if [ is_darwin ]
    then
      echo 'Please install homebrew. https://brew.sh'
    fi
    exit 1
  fi
}

has_postgres (){
  hash psql >/dev/null 2>&1
}

pg_running (){
  echo 'Checking that postgres is running...'
  ps aux | grep [p]ostgres > /dev/null 2>&1
}

has_rvm (){
  hash rvm >/dev/null 2>&1
}

update_rvm (){
  echo 'Updating rvm...'
  rvm get latest
}

rvm_install_ruby_version (){
  rvm install $RUBY_VERSION
}

has_rbenv (){
  hash rbenv >/dev/null 2>&1
}

update_rbenv () {
  brew update
  brew upgrade ruby-build
}

rbenv_install_ruby_version (){
  rbenv install $RUBY_VERSION
  rbenv local $RUBY_VERSION
}

has_ruby_version (){
  INSTALLED_RUBY_VERSION=$(ruby -e 'puts RUBY_VERSION')
  [ "$INSTALLED_RUBY_VERSION" == "$RUBY_VERSION" ]
}

install_ruby_version (){
  verify_homebrew

  if [ ! has_rvm ] && [ ! has_rbenv ]
  then
    echo 'Please install rbenv or rvm to manage your ruby versions.'
    exit 1
  fi

  echo "Installing Ruby Version $RUBY_VERSION"
  has_rvm && {
    update_rvm
    rvm_install_ruby_version
  }

  has_rbenv && {
    update_rbenv
    rbenv_install_ruby_version
  }
}

verify_postgres (){
  has_postgres || {
    echo 'Please install postgresql.'
    exit 1
  }

  pg_running || {
    echo 'Please ensure postgresql is running'
    exit 1
  }
}

verify_ruby_version (){
  echo 'Checking for ruby version'
  has_ruby_version || install_ruby_version
}

verify_bundled_gems (){
  echo 'Updating gems...'
  {
    (gem list -i bundler || gem install bundler) && bundle install --binstubs=./bundle/bin
  } 2>&1
}

postgres_is_running (){
  echo 'Checking that postgres is running'
}

verify_database_configuration (){
  if [ -f config/database.yml ]
  then
    bundle exec rake db:create:all

    if [ $? -ne 0 ]
    then
      echo 'Unable to create the databases for you. Please ensure your database.yml is configured for your system and run rake db:create:all'
      exit 0
    fi
  else
    echo 'The config/database.yml file does not exist. Please create it.'
    exit 1
  fi
}

verify_database_migrations (){
  verify_database_configuration

  bundle exec rake db:abort_if_pending_migrations
  if [ $? -eq 1 ]
  then
    echo 'Running migrations...'
    bundle exec rake db:migrate db:test:prepare
    bundle exec rake db:seed
  fi
}

configure_parallel_testing (){
  echo 'Configuring parallel testing...'
  rake parallel:setup
}

init
