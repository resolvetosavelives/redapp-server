# Files in the config/locales directory are used for internationalization
# and are automatically loaded by Rails. If you want to use locales other
# than English, add the necessary files in this directory.
#
# To use the locales, use `I18n.t`:
#
#     I18n.t 'hello'
#
# In views, this is aliased to just `t`:
#
#     <%= t('hello') %>
#
# To use a different locale, set it with `I18n.locale`:
#
#     I18n.locale = :es
#
# This would use the information in config/locales/es.yml.
#
# The following keys must be escaped otherwise they will not be retrieved by
# the default I18n backend:
#
# true, false, on, off, yes, no
#
# Instead, surround them with single quotes.
#
# en:
#   'true': 'foo'
#
# To learn more, please read the Rails Internationalization guide
# available at http://guides.rubyonrails.org/i18n.html.

en:
  date:
    formats:
      default: "%d-%^b-%Y"
  time:
    formats:
      default: "%d-%^b-%Y %I:%M %p"
  name: "Name"
  phone_number: "Phone Number"
  registration_approval_email:
    accessible_facilities: 'User will have access to data from'
    organization: "Organization"
    registration_facility: 'Registration Facility'
    subject: 'New Registration: User %{full_name} is requesting access to %{org_name} facilities.'
    allow_or_deny_access: "Allow or deny access"
  reset_password_approval_email:
    accessible_facilities: 'User will have access to data from'
    organization: "Organization"
    registration_facility: "Registration Facility"
    subject: 'PIN Reset: User %{full_name} is requesting access.'
    allow_or_deny_access: "Allow or deny access"
  anonymized_data_download_email:
    accessible_facilities: 'Attached documents contain anonymized data from'
    organization: 'Organization'
    district_subject: 'Anonymized Data dump for District %{district_name}, requested by User %{recipient_name}'
    facility_subject: 'Anonymized Data dump for Facility %{facility_name}, requested by User %{recipient_name}'
    district_notice: 'You will soon be emailed a copy of the anonymized data for %{district_name}.'
    facility_notice: 'You will soon be emailed a copy of the anonymized data for %{facility_name}.'
  patient_list_email:
    subject: "Patient list for %{model_type} %{model_name} attached"
    notice: 'You will soon be emailed a copy of the patient line list for %{model_type} %{model_name}.'
    patient_list: 'Patient list'
    requested: 'As you requested, please find the patient list for %{model_type} %{model_name} attached. It contains patient details for every patient registered in the %{model_type}.'
    confidential: 'Please note that this information is confidential and should be kept private.'
    unrequested_html: 'If you did not request this or have questions, please immediately reply to <a href="mailto:help@simple.org">help@simple.org</a>'

  admin:
    reset_otp_alert: 'Are you sure you want to reset the OTP? This will invalidate the previous OTP and a SMS will be sent to the user with the new OTP'
    disable_access_alert: 'Are you sure you want to disable the access for user?'
    enable_access_alert: 'Are you sure you want to enable the access for user?'
    allowed_access_to_user: '%{admin_name} allowed access'
    denied_access_to_user: '%{admin_name} denied access'
    dashboard_title: "Simple Dashboard"
    phi_download_alert: "You are about to download confidental patient data. Are you sure you want to proceed?"
    phi_anonymized_download_alert: "You are about to download confidential (anonymized) patient data. Are you sure you want to proceed?"

  api:
    documentation:
      description: |
        # API spec for Simple Server
        ## Sync APIs
        This API spec documents the endpoints that the devices (that are offline to varying levels) will use to sync data. The sync end points will send and receive bulk (a list of) entities. Both sending and receiving can be batched with configurable batch-sizes to accommodate low network bandwidth situations.

        ## Nesting resources
        The APIs have been designed to provide an optimal balance between accuracy and simplicity. Some of the APIs (patients) will be nested, and some other (blood pressures) will be flat.

        ## Sync Mechanism
        Refer to the [related ADR](https://github.com/simpledotorg/simple-server/blob/master/doc/arch/001-synchronization.md).

        ## API Authentication
        There are two types of authentication available to access different parts of the Simple API.
        - User Authentication - For medical professionals using the Simple App. Grants access to most of the Simple API
          to read and write data for communities of patients.
        - Patient authentication - For individual patients. Grants access to read a patient's own data.

        ### User Authentication

        A Simple client can make authenticated requests to the Simple API on behalf of a medical professional with the
        following three required credentials:
        - API Access Token
        - User ID
        - Facility ID

        In order to obtain these credentials, a Simple client can authenticate a user with the following steps. The
        client will need the user's registered phone number to perform the authentication.
        1. Submit the users phone number to the [`POST /v4/users/find` endpoint](#tag/User/paths/~1users~1find/post). If
        a user exists with this phone number, the response will return their id.
        2. Submit the user's id retreived in the previous step, along with the user's password to the
        [`POST v4/users/activate` endpoint](#tag/User/paths/~1users~1activate/post).
        This will validate the user's password, and trigger an OTP to be sent to the user's phone number.
        3. Submit the user's id, their password, and the OTP (received after the previous step) to the
        [`POST v3/login` endpoint](#tag/User-Login/paths/~1login/post). If the submitted otp and password are valid,
        this will return an access token that can be used to authenticate the user. The access token will remain valid
        until the user signs into another device.

        On successful authentication, the client will receive a payload containing an API access token and some user
        information.
        The following headers need to be attached to subsequent requests as shown below.
        - `Authorization: Bearer <access token>`
        - `X-User-Id: <user ID>`
        - `X-Facility-Id: <facility ID>` This is the id for either the registration facility of the user, or another
        facility in their facility group.

        ### Patient Authentication
        A Simple client can make authenticated requests to the Simple API on behalf of a patient with the following
        credentials:
        - API Access Token
        - Patient ID

        In order to obtain these credentials, a Simple client can authenticate a patient with the following steps. The
        client will need the patient's BP Passport UUID to perform the authentication.
        1. Submit the patient's BP Passport UUID to the [`POST /v4/patients/activate` endpoint](#tag/Patient/paths/~1patient~1activate/post).
           This will trigger an OTP message to be sent to the patient's registered phone number.
        2. Submit the patient's BP Passport UUID and OTP (received after the previous step) to the [`POST /v4/patients/login` endpoint](#tag/Patient/paths/~1patient~1login/post)

        On successful authentication, the client will receive a payload containing an API access token and a patient ID.
        Both of these data points need to be attached to subsequent requests as request headers as shown below.
        - `Authorization: Bearer <access token>`
        - `X-Patient-Id: <patient ID>`

        The API access token will remain valid until the patient signs into another device.

        The comprehensive list of authentication mechanisms used is provided below. It lists the specific details of
        using access tokens and other request headers to authenticate with the API.
      title: 'Simple Server'
      logo:
        image: 'rtsl_logo.png'
        background_color: '#FFFFFF'
      contact:
        email: 'eng-backend@resolvetosavelives.org'
      license:
        name: 'MIT'
        url: 'https://github.com/simpledotorg/simple-server/blob/master/LICENSE'

  faker:
    name:
      first_name: ['Ishita', 'Riya', 'Aditya', 'Shreya', 'Mahesh', 'Priya', 'Deepak', 'Rahul', 'Ankit', 'Tanvi', 'Amit', 'Yash', 'Abhishek', 'Tanya', 'Shyam', 'Vani', 'Divya', 'Rohit', 'Anjali', 'Priyanka']
      last_name: ['Lamba', 'Bahl', 'Sodhi', 'Sardana', 'Puri', 'Chhabra', 'Khanna', 'Malhotra', 'Mehra', 'Garewal', 'Dhillon', 'Bharathi', 'Madhu', 'Bharathi', 'Manabi', 'Anjum', 'Vani', 'Riya', 'Shreya']
